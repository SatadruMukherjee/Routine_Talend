package routines;
import java.util.*;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class modana {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static double modebhai(List<Object> a) {
    	ArrayList<Double> ab=new ArrayList<Double>();
    	for (Object hola : a) {
            ab.add((Double) hola);
        }
    	  double maxValue = 0.0;
    	  int maxCount=0;
    	  int i,j;
    	  int n=ab.size();
          for (i = 0; i < n; ++i) {
             int count = 0;
             for (j = 0; j < n; ++j) {
 double  	 lefta=ab.get(j);
     double righta=ab.get(i);
                if (lefta==righta)
                count=count+1;
             }

             if (count > maxCount) {
                maxCount = count;
                maxValue = ab.get(i);
             }
          }
          return maxValue;
    }
}
